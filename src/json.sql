SELECT CAST(JSON_EXTRACT(T1_JSON_1,'$.key1') AS UNSIGNED) from T1 order by 1
SELECT COUNT(1) from T1 where CAST(JSON_EXTRACT(T1_JSON_1,'$.key1') AS UNSIGNED) between RAND_INT_1 and RAND_INT_2
SELECT COUNT(1) from T1 where CAST(JSON_EXTRACT(T1_JSON_1,'$.key1') AS UNSIGNED) > RAND_INT_1 AND CAST(JSON_EXTRACT(T1_JSON_1,'$.key2') AS UNSIGNED) < RAND_INT_2
SELECT COUNT(1) from T1 where CAST(JSON_EXTRACT(T1_JSON_1,'$.key1') AS UNSIGNED) > RAND_INT_1 OR CAST(JSON_EXTRACT(T1_JSON_1,'$.key2') AS UNSIGNED) < RAND_INT_2
#JSON_SEARCH
SELECT CAST(JSON_SEARCH(T1_JSON_1, 'one', 'RAND_INT') AS CHAR) from T1 order by 1
#JSON VALUE
SELECT CAST(JSON_VALUE(T1_JSON_1, '$.keyRAND_INT') AS UNSIGNED) from T1 order by 1
#JSON VALUE RETURN DECIMAL
SELECT CAST(JSON_VALUE(T1_JSON_1, '$.keyRAND_INT' RETURNING DECIMAL) AS DECIMAL(10,2)) from T1 order by 1
#JSON_INSERT
SELECT CAST(JSON_INSERT(T1_JSON_1, '$.keyRAND_INT', 100) AS  CHAR) from T1 order by 1
#WITH and some group by
WITH T1_CTE AS (SELECT CAST(JSON_EXTRACT(T1_JSON_1,'$.keyRAND_INT') AS UNSIGNED) as key1 from T1) SELECT key1, COUNT(1) from T1_CTE group by key1 order by 1
#USE DENSE
SELECT DENSE_RANK() OVER (ORDER BY CAST(JSON_EXTRACT(T1_JSON_1,'$.keyRAND_INT') AS UNSIGNED)) from T1 order by 1
# make very complex
SELECT DENSE_RANK() OVER (ORDER BY CAST(JSON_EXTRACT(T1_JSON_1,'$.keyRAND_INT') AS UNSIGNED)) from T1 where CAST(JSON_EXTRACT(T1_JSON_1,'$.keyRAND_INT') AS UNSIGNED) > RAND_INT_1 AND CAST(JSON_EXTRACT(T1_JSON_1,'$.keyRAND_INT') AS UNSIGNED) < RAND_INT_2 order by 1
#USE IFNULL, COAL..
SELECT IFNULL(CAST(JSON_EXTRACT(T1_JSON_1,'$.keyRAND_INT') AS UNSIGNED), 0) from T1 order by 1
SELECT COALESCE(CAST(JSON_EXTRACT(T1_JSON_1,'$.keyRAND_INT') AS UNSIGNED), 0) from T1 order by 1
WITH A as (WITH B as (SELECT CAST(JSON_EXTRACT(T1_JSON_1,'$.keyRAND_INT') AS UNSIGNED) as key1 from T1) SELECT key1 from B) SELECT key1 from A order by 1
#WITH A as (WITH B as (SELECT T1_JSON_1->'$[RAND_INT]' x, T1_JSON_1 x2 FROM T1) SELECT CAST(x AS UNSIGNED) i, x2  from B  where x is not null) SELECT i from A order by 1 https://rnd-gitlab-eu.huawei.com/sweden-research-center/norway/hermes/-/issues/3971
#some queries with JSON_ARRAY
SELECT CAST(JSON_EXTRACT(T1_JSON_1,'$[RAND_INT_1]') AS UNSIGNED) from T1 order by 1
SELECT CAST(JSON_KEYS(T1_JSON_1) AS CHAR) from T1 where CAST(JSON_LENGTH(T1_JSON_1) AS UNSIGNED) > RAND_INT_1 order by 1
WITH B AS(WITH A AS (SELECT CAST(JSON_LENGTH(T1_JSON_1)  AS UNSIGNED) l from T1 where CAST(JSON_LENGTH(T1_JSON_1)  AS UNSIGNED) > 0  order by 1 limit 10) SELECT CAST(JSON_EXTRACT(T2_JSON_1,'$[RAND_INT_1]') AS UNSIGNED) X from T2 , A where CAST(JSON_LENGTH(T2_JSON_1) AS UNSIGNED) = A.l and A.l is not null order by 1) select X from B where x is not null order by 1
#use exists
SELECT COUNT(1), cast(T1_JSON_1 as char) from T1 where EXISTS (SELECT 1 from T2 where CAST(JSON_EXTRACT(T1_JSON_1,'$.keyRAND_INT') AS UNSIGNED) = CAST(JSON_EXTRACT(T2_JSON_1,'$.keyRAND_INT') AS UNSIGNED) ) group by cast(T1_JSON_1 as char) order by 1,2
